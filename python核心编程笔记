#赋值语句
 C语言中赋值语句其实是被当成一个表达式（可以返回值）,这条并不适合于 Python, Python 的赋值语句不会返回值
  x = 1 
  y = (x = x + 1)--不合法
  链式赋值没问题
  y = x = x + 1 ---合法

#自增减运算
 Python 不支持类似 x++ 或 --x 这样的前置/后置自增/自减运算
 
#下划线
 使用下划线的三种场景
   1.在解释器中
     “_”代表交互式解释器会话中上一条执行的语句的结果
   2.作为一个名称
     此时“_”作为临时性的名称使用。这样，当其他人阅读你的代码时将会知道，
     你分配了一个特定的名称，但是并不会在后面再次用到该名称。
   3.名称前的下划线
     3.1 名称前的单下划线,指定该名称属性为“私有”,如果你写了代码“from <模块/包名> import *”，
     那么以“_”开头的名称都不会被导入，除非模块或包中的“__all__”列表显式地包含了它们
     3.2 Python文档指出，“__spam”这种形式（至少两个前导下划线，最多一个后续下划线）的任何标识符
     将会被“_classname__spam”这种形式原文取代，在这里“classname”是去掉前导下划线的当前类名,
     意味着如果你创建A的一个子类B，那么你将不能轻易地覆写A中的方法“__method_name”
     3.3 名称前后的双下划线代表系统定义名字,不推荐使用
