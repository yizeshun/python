#coding:utf-8

"""
python实现多进程的几种方式
"""
"""
方法一:multiprocessing模块:
创建Process实例，传入任务执行函数作为参数
Process常用属性和方法：
	name:进程名
	pid:进程id
	run():自定义子类时覆写
	join(timeout=None):阻塞进程
	terminate:中止进程
	is_alive():判断进程是否存活
"""
import os,time
from multiprocessing import Process,cpu_count

def child_process():
	"""子进程"""
	print "子进程执行中---pid={0},ppid={1}".format(os.getpid(),os.getppid())
	time.sleep(2)
	print "子进程终结---pid={0}".format(os.getpid())

def main():
	"""主进程"""
	print "cpu的核心数为{0}".format(cpu_count())
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = []
	#创建子进程实例
	for i in range(2):
		p = Process(target=child_process,name="child_process"+str(i),args=())
		ps.append(p)
	#开启进程
	for i in range(2):
		ps[i].start()
	#阻塞进程
	for i in range(2):
		ps[i].join()
	print "主进程中止"

if __name__ == "__main__":
	main()
	
	
"""
方法二:multiprocessing模块:
派生Process的子类，重写run方法
"""
import os,time
from multiprocessing import Process,cpu_count

class MyProcess(Process):
	"""自定义进程类"""
	def __init__(self):
		Process.__init__(self)
	def run(self):
		print "子进程开始执行---pid={0},ppid={1}".format(os.getpid(),os.getppid())
		time.sleep(2)
		print "子进程中止---pid={0}".format(os.getpid())

def main():
	"""主进程"""
	print "cpu的核心数为{0}".format(cpu_count())
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = []
	#创建子进程实例
	for i in range(2):
		p = MyProcess()
		ps.append(p)
	#开启进程
	for i in range(2):
		ps[i].start()
	#阻塞进程
	for i in range(2):
		ps[i].join()
	print "主进程中止"

if __name__ == "__main__":
	main()
	
"""
方法三:multiprocessing模块:
使用进程池Pool
进程池对并发进程的限制数量为5个，
而程序运行时会产生10个进程，
进程池将自动管理系统内进程的并发数量，
其余进程将会在队列中等待。限制并发数量是因为，
系统中并发的进程不是越多越好，并发进程太多，
可能使CPU大部分的时间用于进程调度，而不是执行有效的计算。
"""
import os,time
from multiprocessing import Pool,cpu_count

def child_process(arg):
	"""子进程"""
	print "子进程执行中---pid={0},ppid={1},编号{2}".format(os.getpid(),os.getppid(),arg)
	time.sleep(0.5)
	print "子进程终结---pid={0},编号{1}".format(os.getpid(),arg)

def main():
	"""主进程"""
	print "cpu的核心数为{0}".format(cpu_count())
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = Pool(5)
	#创建子进程实例
	for i in range(10):
		#同步执行
		# ps.apply(child_process,args=(i,))
		#异步执行
		ps.apply_async(child_process,args=(i,))
	#关闭进程池，停止接收其他进程
	ps.close()
	#阻塞进程
	ps.join()
	print "主进程中止"

if __name__ == "__main__":
	main()
