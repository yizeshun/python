#概念
将内存中的对象转换为可通过网络传输或者可以存储的过程称之为序列化，反之则成为反序列化
#python中序列化的方法
两个模块：pickle和json
pickle属于python独有的序列化模块，不能和其它编程语言的序列化交互
pickle模块中有四个方法：dumps()、loads()、dump()、load()
用法如下：
  1.dumps()
  #coding:utf-8
  import pickle
  a = [1,2,3,4]
  dumps_a = pickle.dumps(a)
  print dumps_a	
  2.loads()
  b = pickle.loads(dumps_a)
  print b
  3.dump()直接一步将对象保存在文件中,接收一个对象和一个文件对象
  #coding:utf-8
  import pickle
  a = [1,2,3,4]
  f = open('C:/Users/dell/Desktop/dump.txt','wb')
  dumps_a = pickle.dump(a,f)
  4.load()直接一步将文件中的序列化对象读入，并生成对象
  #coding:utf-8
  import pickle
  f = open('C:/Users/dell/Desktop/dump.txt','rb')
  load_a = pickle.load(f)
  print load_a

json模块将对象序列化为标准格式json，便于各种编程语言及web之间的传递
json模块也有四个方法: dumps()、loads()、dump()、load()
用法同pickle

#采用json模块将类的实例进行序列化
#coding:utf-8
import json
class Student(object):
	def __init__(self,name,age,score):
		self.name = name
		self.age = age
		self.score = score
student = Student('a', 21, 80)
instance_dumps = json.dumps(student, default=lambda obj : obj.__dict__)
print instance_dumps
必须加上defalut函数，不然dumps方法不知道如何将student实例变为一个JSON的'{}'对象


  

  
