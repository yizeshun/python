1.装饰器实现
# coding:utf-8

import threading
import time

global_lock = threading.Lock()

def Singleton(cls):
	_instance = {}
	def _singleton(*args, **kwargs):
		with global_lock:
			if cls not in _instance:
				_instance[cls] = cls(*args, **kwargs)
			return _instance[cls]
	return _singleton

@Singleton()
class A(object):
	def __init__(self, x=0):
		self.x = x
		time.sleep(1)

def init(lock):
	a = A()
	with lock:
		print a

def main():
	print_lock = threading.Lock()
	for i in range(10):
		thread = threading.Thread(target=init, args=(print_lock,))
		thread.start()

if __name__ == "__main__":
	main()
以上实现方式满足线程安全的需求

2.采用python的__new__方法
# coding:utf-8

import threading
import time


global_lock = threading.Lock()

class Singleton(object):

	def __init__(self, arg):
		super(Singleton, self).__init__()
		self.arg = arg

	def __new__(cls, *args, **kwargs):
		if not hasattr(cls, "_instance"):
			with global_lock:
				cls._instance = object.__new__(cls)
		return cls._instance

def init(lock):
	instance = Singleton(2)
	with lock:
		print instance

def main():
	print_lock = threading.Lock()
	for i in range(10):
		thread = threading.Thread(target=init, args=(print_lock,))
		thread.start()

if __name__ == "__main__":
	main()
  




