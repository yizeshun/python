Python 进程及线程
1.	线程与进程
进程（Process）实际上表示的就是计算机正在进行的一个任务。比如，打开一个浏览器便是启动一个浏览器进程，打开一个记事本便是启动一个记事本进程。一个进程未必只能进行一件事，就像一个Word进程，在打字的同时还会有拼写检查，这些在进程内部同时进行的多个“子任务”，就称为线程（Thread）。
进程和线程的主要差别在于它们是不同的操作系统资源管理方式。进程有独立的地址空间，一个进程崩溃后，在保护模式下不会对其它进程产生影响，而线程只是一个进程中的不同执行路径，不同的线程之间共享内存，一个线程死掉就等于整个进程死掉。所以多进程的程序要比多线程的程序健壮，但在进程切换时，耗费资源较大，效率要差一些。
2.	创建进程
Python提供了一个multiprocessing模块来供跨平台版本的Python使用多进程，这个模块提供了一个Process类来代表一个进程对象，具体创建方式由三种。
2.1.	创建Process实例，传入任务执行函数作为参数
from multiprocessing import Process
import os,time
def child_process():
	"""子进程"""
	print "子进程执行中---pid={0},ppid={1}".format(os.getpid(),os.getppid())
	time.sleep(2)
	print "子进程终结---pid={0}".format(os.getpid())
def main():
	"""主进程"""
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = []
	#创建子进程实例
	for i in range(2):
		p = Process(target=child_process,name="child_process"+str(i),args=())
		ps.append(p)
	#开启进程
	for i in range(2):
		ps[i].start()
	#阻塞进程
	for i in range(2):
		ps[i].join()
	print "主进程中止"
if __name__ == "__main__":
	main()
2.2.	派生Process的子类，重写run方法
import os,time
from multiprocessing import Process
class MyProcess(Process):
	"""自定义进程类"""
	def __init__(self):
		Process.__init__(self)
	def run(self):
		print "子进程开始执行---pid={0},ppid={1}".format(os.getpid(),os.getppid())
		time.sleep(2)
		print "子进程中止---pid={0}".format(os.getpid())
def main():
	"""主进程"""
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = []
	#创建子进程实例
	for i in range(2):
		p = MyProcess()
		ps.append(p)
	#开启进程
	for i in range(2):
		ps[i].start()
	#阻塞进程
	for i in range(2):
		ps[i].join()
	print "主进程中止"
if __name__ == "__main__":
	main()
2.3.	使用进程池Pool
初始化进程池时，可以对并发进程的数量进行限制，进程池将自动管理系统内进程的并发数量，多余进程将会在队列中等待。限制并发数量是因为，系统中并发的进程不是越多越好，并发进程太多，可能使CPU大部分的时间用于进程调度，而不是执行有效的计算。
import os,time
from multiprocessing import Pool
def child_process(arg):
	"""子进程"""
	print "子进程执行中---pid={0},ppid={1},编号{2}".format(os.getpid(),os.getppid(),arg)
	time.sleep(0.5)
	print "子进程终结---pid={0},编号{1}".format(os.getpid(),arg)
def main():
	"""主进程"""
	print "主进程执行中---pid={0}".format(os.getpid())
	ps = Pool(5)
	#创建子进程实例
	for i in range(10):
		#同步执行
		# ps.apply(child_process,args=(i,))
		#异步执行
		ps.apply_async(child_process,args=(i,))
	#关闭进程池，停止接收其他进程
	ps.close()
	#阻塞进程
	ps.join()
	print "主进程中止"
if __name__ == "__main__":
	main()
3.	进程通信
不同进程之间进行数据交互，最容易想到共享全局变量的方式，这样通过向全局变量写入和读取信息便能实现信息交互，但是这种方式行不通。
from multiprocessing import Process
L = [1,2,3]
def child_process(num):
	global L
	L.append(num)
	print L
def main():
	p1 = Process(target=child_process,args=(4,))
	p2 = Process(target=child_process,args=(5,))
	p1.start()
	p2.start()
	p1.join()
	p2.join()
	print L
if __name__ == "__main__":
	main()
执行结果为
 
全局变量L的值并没有任何改变，直观上表现为在创建进程时，每个进程单独复制了一份全局变量L，进程内的操作都是在L的副本上进行的，简单的共享全局变量的方式并不能达到进程通信的要求。
Python提供的进程通信一般有如下几种方式：
3.1.	使用Pipe
Pipe()函数返回一对由管道连接的连接对象，默认情况下是双工(双向) ，两个连接对象代表管道的两端，每个连接对象都有send()和recv()，send用于向管道中发数据，recv用于从管道中拿数据，调用Pipe函数时，可以设置duplex参数的值，默认是True，表示双向，如果设置成False，那么管道就是单向的。例如：conn1，conn2 = Pipe(duplex=False)，这里conn1只能用于接收消息，conn2只能用于发送消息。
from multiprocessing import Process,Pipe
import time
def send_process(conn):
	conn.send("hello I am send_process")
	print conn.recv()
	conn.close()
def recv_process(conn):
	conn.send("hello I am recv_process")
	print conn.recv()
	conn.close()
def main():
	conn1,conn2 = Pipe()
	p1 = Process(target=send_process,args=(conn1,))
	p2 = Process(target=recv_process,args=(conn2,))
	p1.start()
	p2.start()
	p1.join()
	p2.join()
	print "主进程完毕"
if __name__ == "__main__":
	main()
3.2.	使用Queue
这里的Queue是multiprocessing模块中的Queue，它实现了多进程之间的通信，并且也是进程安全的。
import os,time
from multiprocessing import Process,Queue
def write(q):
	"""向队列中写入数据"""
	dataset = [1,2,3,4]
	for value in dataset:
		print "put %d to quene..."%(value)
		q.put(value)
		time.sleep(0.5)
def read(q):
	"""从队列中读取数据"""
	while True:
		if not q.empty():
			value = q.get()
			print "get %d from quene"%(value)
			time.sleep(0.5)
		else:
			break
def main():
	"""主进程"""
	print "主进程执行中---pid={0}".format(os.getpid())
	queue = Queue()
	pw = Process(target=write,args=(queue,))
	pr = Process(target=read,args=(queue,))
	pw.start()
	pw.join()
	pr.start()
	pr.join()
	print "主进程中止"
if __name__ == "__main__":
	main()
3.3.	使用Manager
import os
from multiprocessing import Process,Manager
def sub_process(d,l):
	d[os.getpid()] = os.getpid()
	l.append(os.getpid())
	print l
def main():
	m = Manager()
	d = m.dict()
	l = m.list()
	ps = []
	for i in range(10):
		p = Process(target=sub_process,args=(d,l,))
		ps.append(p)
	for i in range(10):
		ps[i].start()
	for i in range(10):
		ps[i].join()
	print d
	print l
if __name__ == "__main__":
	main()
4.	创建线程
Python创建线程的模块是threading，该模块提供线程的创建方式，主要有以下几种：
4.1.	使用threading.Thread方法，将线程方法直接传入
import threading
import time
def thread_run():
	print "线程{0}启动".format(threading.current_thread().getName())
	time.sleep(1)
	print "线程{0}中止".format(threading.current_thread().getName())
def main():
	"""主线程"""
	print "主线程执行中---线程名={0}".format(threading.current_thread().getName())
	loop = 10
	th = []
	for i in range(loop):
		thread = threading.Thread(target=thread_run,name="线程"+str(i))
		th.append(thread)
	#开启线程
	for i in range(loop):
		th[i].start()
	#阻塞线程
	for i in range(loop):
		th[i].join()
	print "主线程中止"
if __name__ == "__main__":
	main()
4.2.	派生Thread类，重写run方法
import threading
import time
class myThread(threading.Thread):
	"""自定义线程类"""
	def __init__(self,name):
		super(myThread,self).__init__()
		self.name = name
	def run(self):
		print "线程{0}启动".format(self.name)
		time.sleep(1)
		print "线程{0}中止".format(self.name)
def main():
	"""主线程"""
	print "主线程执行中---线程名={0}".format(threading.current_thread().getName())
	loop = 10
	th = []
	for i in range(loop):
		thread = myThread("线程"+str(i))
		th.append(thread)
	#开启线程
	for i in range(loop):
		th[i].start()
	#阻塞线程
	for i in range(loop):
		th[i].join()
	print "主线程中止"
if __name__ == "__main__":
	main()
5.	GIL锁
Python 代码的执行由 Python 虚拟机(也叫解释器主循环)来控制。Python 在设计之初就考虑到要在主循环中，同时只有一个线程在执行，就像单 CPU 的系统中运行多个进程那样，内存中可以存放多个程序，但任意时刻，只有一个程序在 CPU 中运行。同样地，虽然 Python 解释器中可以“运行”多个线程，但在任意时刻，只有一个线程在解释器中运行。鉴于以上陈述，可以得出以下几点：
(1)	Python多线程安全
对于python多线程程序，并不需要考虑线程安全，因为从解释器层面就保证了同一时刻只能有一个线程在执行，也就是只有一个线程在操作共享资源。
(2)	Python多线程不足
Python多线程在多核cpu的情况下，对于计算密集型任务，并不能很好的发挥多线程的优势，因为它的多线程是假的多线程，多个线程并不能并行执行，仅仅是通过快速切换，达到并发执行。这也是为什么在python中对于计算密集型任务，在多核cpu上，通常采用多进程的方式来解决，因为每个进程有单独的GIL，可以真正的实现在多个核上，多个进程并行执行。
